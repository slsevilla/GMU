from os.path import join
import pandas as pd
from collections import defaultdict
import yaml


##############################
#Reference Taxonomy
#gg downloaded: https://mothur.org/w/images/6/68/Gg_13_8_99.taxonomy.tgz/
##gg_13_8_otus/taxonomy/99_otu_taxonomy.txt
#silva downloaded: https://www.arb-silva.de/download/archive/qiime/
##SILVA_132_QIIME_release/taxonomy/16S_only/99/taxonomy_all_levels.txt
ref_paths = ['/data/sevillas2/gmu/gg_taxonomy.txt', '/data/sevillas2/gmu/silva_taxonomy.txt']
out_dir = '/data/sevillas2/gmu/ref/'

tax_dict = {}
for i in ref_paths:
    refName = i.split('/')[-1].split('_')[0]
    tax_dict[refName] = i

def get_taxref_full_path(wildcards):
    """
    """
    (refFullPath) = tax_dict[wildcards.tax_name]
    return refFullPath

rule all:
    input:
        expand(join(out_dir + 'refdb_tax_{tax_name}.qza'),tax_name=tax_dict.keys()),

#recreate taxonomy files
rule create_ref_tax:
    """ Create the reference database to be used for taxonomic_classification
    used unaligned reads for this - creates ''FeatureData[Taxonomy]''
    """
    input:
        ref_tax = get_taxref_full_path
    output:
        o1 = join(out_dir + 'refdb_tax_{tax_name}.qza')
    params:
        rname = '{tax_name}'
    shell:
      """
      module load QIIME/2-2019.10;
      qiime tools import \
        --type 'FeatureData[Taxonomy]' \
        --input-path {input.ref_tax} \
        --input-format HeaderlessTSVTaxonomyFormat \
        --output-path {output.o1}')
      """
