'''
Performing grouping and taxonomic taxonomic_classification
* Clustering reads to OTU's *
https://docs.qiime2.org/2019.1/tutorials/otu-clustering/
Use three methods to group reads into OTU's, using an assigned level of similarity
- de novo
- closed-reference
- open-reference

* Taxonomic classification *
https://docs.qiime2.org/2019.1/plugins/available/feature-classifier/
Use three methods to classify the taxonomic classes
- BLAST+
    - consensus-blast: Performs BLAST+ local alignment between query and
    reference_reads, then assigns consensus taxonomy to each query sequence
    from among maxaccepts hits, min_consensus of which share that taxonomic
    assignment. Note that maxaccepts selects the first N hits with >
    perc_identity similarity to query, not the top N matches.
- VSEARCH
    - consensus-vsearch: Performs VSEARCH global alignment between query and
    reference_reads, then assigns consensus taxonomy to each query sequence
    from among maxaccepts top hits, min_consensus of which share that taxonomic
    assignment. Unlike classify-consensus-blast, this method searches the entire
    reference database before choosing the top N hits, not the first N hits.
- SKLEARN
    - classify-sklearn: Classify reads by taxon using a fitted classifier.
'''

import re
import subprocess
import sys
from os.path import join
import pandas as pd
from collections import defaultdict

# set paths
input_dir = '/data/sevillas2/gmu/aim1/input/'
output_dir = '/data/sevillas2/gmu/aim1/output/'
exec_dir = '/data/sevillas2/dissertation/aim1/workflow/'
ref_db = '/data/sevillas2/gmu/ref/'
manifest_dir = '/data/sevillas2/gmu/aim1/manifest.tsv'

#define groups
flowcell_ids = ['180112_M01354_0104_000000000-BFN3F','180112_M03599_0134_000000000-BFD9Y','180328_M01354_0106_000000000-BFMHC','190617_M01354_0118_000000000-CHFG3']
taxonomy_ids = ['gg','silva']
group1_ids=['open','closed']
group2_ids=['dn','dada']
groupfinal_ids=['open_gg','closed_gg','open_silva','closed_silva','dn','dada']

#set parameters
trim_left_forward = 0
trim_left_reverse = 0
truncate_length_forward = 0
truncate_length_reverse = 0
min_fold_parent_over_abundance = 2.0
min_num_reads_per_sample=1000
min_num_reads_per_feature = 1
min_num_samples_per_feature = 1
min_num_features_per_sample = 1

rule all:
    input:
        expand(join(input_dir,'{f_id}.qza'), f_id=flowcell_ids),
        expand(join(output_dir,'00_joined/{f_id}_joined.qza'), f_id=flowcell_ids),
        expand(join(output_dir,'01_derep/{f_id}_table.qza'), f_id=flowcell_ids),

        expand(join(output_dir,'02_clustering/{f_id}_table_{g1_id}_{tax_ref}.qza'),f_id=flowcell_ids,tax_ref=taxonomy_ids,g1_id=group1_ids),
        expand(join(output_dir,'02_clustering/{f_id}_table_{g2_id}.qza'),f_id=flowcell_ids,g2_id=group2_ids),

        expand(join(output_dir,'03_merged/merged_table_{gf_id}.qza'),gf_id=groupfinal_ids),
        expand(join(output_dir,'03_merged/merged_seq_{gf_id}.qza'),gf_id=groupfinal_ids),

        expand(join(output_dir,'04_filtered/4_tab_{gf_id}.qza'),gf_id=groupfinal_ids),
        expand(join(output_dir,'04_filtered/4_seq_{gf_id}.qza'),gf_id=groupfinal_ids),

        expand(join(output_dir,'05_class/vsearch_{tax_ref}_{gf_id}.qza'),gf_id=groupfinal_ids,tax_ref=taxonomy_ids),
        expand(join(output_dir,'05_class/blast_{tax_ref}_{gf_id}.qza'),gf_id=groupfinal_ids,tax_ref=taxonomy_ids),
        expand(join(output_dir,'05_class/scikit_{tax_ref}_{gf_id}.qza'),gf_id=groupfinal_ids,tax_ref=taxonomy_ids),

        expand(join(output_dir,'06_phylogenetics/rooted_tree_{gf_id}.qza'),gf_id=groupfinal_ids)

#merge paired demux artifacts
rule join_seq:
    '''
    dereplication requires format [JoinedSequencesWithQuality]
    current format is [PairedEndSequencesWithQuality]
    this step will make the conversion
    https://docs.qiime2.org/2019.1/plugins/available/vsearch/join-pairs/
    '''
    input:
        f1 = join(input_dir,'{f_id}.qza'),
    params:
        rname = "join_seq"
    output:
        o1 = join(output_dir,'00_joined/{f_id}_joined.qza')
    shell:
        '''
        module load qiime/2-2019.1; \
        qiime vsearch join-pairs \
        --i-demultiplexed-seqs {input.f1} \
        --o-joined-sequences {output.o1}
        '''

#dereplicate artifacts
rule derep:
    '''
    https://docs.qiime2.org/2019.1/plugins/available/vsearch/dereplicate-sequences/
    '''
    input:
        f1 = join(output_dir,'00_joined/{f_id}_joined.qza'),
    params:
        rname = 'derep',
    output:
        table = join(output_dir,'01_derep/{f_id}_table.qza'),
        seq = join(output_dir,'01_derep/{f_id}_seq.qza')
    shell:
        '''
        module load qiime/2-2019.1; \
        qiime vsearch dereplicate-sequences \
            --i-sequences {input.f1} \
            --o-dereplicated-table {output.table} \
            --o-dereplicated-sequences {output.seq}
        '''

#perform clustering / grouping on each flowcell
rule denovo:
    '''
    https://docs.qiime2.org/2020.8/plugins/available/vsearch/cluster-features-de-novo/
    intended to be used following filterting/derep methods, not as a general-purpose clustering method
    '''
    input:
        table = join(output_dir,'01_derep/{f_id}_table.qza'),
        seq = join(output_dir,'01_derep/{f_id}_seq.qza')
    params:
        rname = 'denovo'
    output:
        table = join(output_dir,'02_clustering/{f_id}_table_dn.qza'),
        seq = join(output_dir,'02_clustering/{f_id}_seq_dn.qza')
    shell:
        '''
        module load qiime/2-2019.1; \
        qiime vsearch cluster-features-de-novo \
          --i-table {input.table} \
          --i-sequences {input.seq} \
          --p-perc-identity 0.99 \
          --o-clustered-table {output.table} \
          --o-clustered-sequences {output.seq}
        '''

rule dada2:
    input:
        f1 = join(input_dir,'{f_id}.qza')
    params:
        rname = 'dada2',
        trim_l_f = trim_left_forward,
        trun_len_f = truncate_length_forward,
        min_fold = min_fold_parent_over_abundance
    output:
        table = join(output_dir,'02_clustering/{f_id}_table_dada.qza'),
        seqs = join(output_dir,'02_clustering/{f_id}_seq_dada.qza'),
        stats = join(output_dir,'02_clustering/{f_id}_stat_dadas.qza'),
    shell:
        '''
        module load qiime/2-2019.1; \
        qiime dada2 denoise-paired \
            --verbose \
            --i-demultiplexed-seqs {input.f1} \
            --o-table {output.table} \
            --o-representative-sequences {output.seqs} \
            --o-denoising-stats {output.stats} \
            --p-trim-left-f {params.trim_l_f} \
            --p-trunc-len-f {params.trun_len_f} \
            --p-trim-left-r {params.trim_l_f} \
            --p-trunc-len-r {params.trun_len_f} \
            --p-min-fold-parent-over-abundance {params.min_fold}
        '''

rule closed:
    input:
        table = join(output_dir,'01_derep/{f_id}_table.qza'),
        seq = join(output_dir,'01_derep/{f_id}_seq.qza')
    params:
        rname = 'closed',
        ref_tax = join(ref_db,'refdb_seq_{tax_ref}.qza')
    output:
        table = join(output_dir,'02_clustering/{f_id}_table_closed_{tax_ref}.qza'),
        seq = join(output_dir,'02_clustering/{f_id}_seq_closed_{tax_ref}.qza'),
        unmatch = join(output_dir,'02_clustering/{f_id}_unmatch_closed_{tax_ref}.qza'),
    shell:
        '''
        module load qiime/2-2019.1; \
        qiime vsearch cluster-features-closed-reference \
          --i-table {input.table} \
          --i-sequences {input.seq} \
          --i-reference-sequences {params.ref_tax} \
          --p-perc-identity 0.99 \
          --o-clustered-table {output.table} \
          --o-clustered-sequences {output.seq} \
          --o-unmatched-sequences {output.unmatch}
        '''

rule open:
    '''
    https://docs.qiime2.org/2020.11/plugins/available/vsearch/cluster-features-open-reference/

    intended to be used following filterting/derep methods, not as a general-purpose clustering method
    '''
    input:
        table = join(output_dir,'01_derep/{f_id}_table.qza'),
        seq = join(output_dir,'01_derep/{f_id}_seq.qza')
    params:
        rname = 'open',
        ref_tax = join(ref_db,'refdb_seq_{tax_ref}.qza')
    output:
        table = join(output_dir,'02_clustering/{f_id}_table_open_{tax_ref}.qza'),
        seq = join(output_dir,'02_clustering/{f_id}_seq_open_{tax_ref}.qza'),
        new = join(output_dir,'02_clustering/{f_id}_new_open_{tax_ref}.qza'),
    shell:
        '''
        module load qiime/2-2019.1; \
        qiime vsearch cluster-features-open-reference \
          --i-table {input.table} \
          --i-sequences {input.seq} \
          --i-reference-sequences {params.ref_tax} \
          --p-perc-identity 0.99 \
          --o-clustered-table {output.table} \
          --o-clustered-sequences {output.seq} \
          --o-new-reference-sequences {output.new}
        '''

def get_merge_table(wildcards):
    cmd = ''
    for ids in groupfinal_ids:
        l = ''

        for cells in flowcell_ids:
            l = '--i-tables ' + output_dir + '02_clustering/' + cells + '_table_' + ids + '.qza ' + l
        
        cmd = 'module load qiime/2-2019.1; qiime feature-table merge ' + l + '--o-merged-table ' + output_dir + '03_merged/merged_table_' + ids + '.qza; ' + cmd
    
    return cmd

#merge tables and sequences
rule merge_tables:
    input:
        f1 = expand(join(output_dir,'02_clustering/{f_id}_table_{gf_id}.qza'),f_id=flowcell_ids,gf_id=groupfinal_ids),
    params:
        rname = "merge_tab",
        cmd = get_merge_table
    output:
        o1 = expand(join(output_dir,'03_merged/merged_table_{gf_id}.qza'),f_id=flowcell_ids,gf_id=groupfinal_ids),
    shell:
        '''
        {params.cmd}
        '''

def get_merge_seq(wildcards):
    cmd = ''
    for ids in groupfinal_ids:
        l = ''

        for cells in flowcell_ids:
            l = '--i-data ' + output_dir + '02_clustering/' + cells + '_seq_' + ids + '.qza ' + l
        
        cmd = 'module load qiime/2-2019.1; qiime feature-table merge-seqs ' + l + '--o-merged-data ' + output_dir + '03_merged/merged_seq_' + ids + '.qza; ' + cmd
    
    return cmd

rule merge_seq:
    input:
        f1 = expand(join(output_dir,'02_clustering/{f_id}_seq_{gf_id}.qza'),f_id=flowcell_ids,gf_id=groupfinal_ids),
    params:
        rname = "merge_seq",
        cmd = get_merge_seq
    output:
        o1 = expand(join(output_dir,'03_merged/merged_seq_{gf_id}.qza'),f_id=flowcell_ids,gf_id=groupfinal_ids),
    shell:
        '''
        {params.cmd}
        '''

#filtering
rule filter_tab:
    """
    three levels of filtering
    1_samples_read_count
    2_features_read_count
    3_features_sample_count
    4_samples_feature_count
    """
    input:
        f1 = join(output_dir,'03_merged/merged_table_{gf_id}.qza')
    output:
        o1 = temp(join(output_dir,'04_filtered/1_tab_{gf_id}.qza')),
        o2 = temp(join(output_dir,'04_filtered/2_tab_{gf_id}.qza')),
        o3 = temp(join(output_dir,'04_filtered/3_tab_{gf_id}.qza')),
        o4 = join(output_dir,'04_filtered/4_tab_{gf_id}.qza'),
    params:
        f1 = min_num_reads_per_sample,
        f2 = min_num_reads_per_feature,
        f3 = min_num_samples_per_feature,
        f4 = min_num_features_per_sample,
        rname = "filter_tab"
    shell:
        '''
        module load qiime/2-2019.1; \
        qiime feature-table filter-samples \
            --i-table {input.f1} \
            --p-min-frequency {params.f1} \
            --o-filtered-table {output.o1};
        qiime feature-table filter-features \
            --i-table {output.o1} \
            --p-min-frequency {params.f2} \
            --o-filtered-table {output.o2};
        qiime feature-table filter-features \
            --i-table {output.o2} \
            --p-min-samples {params.f3} \
            --o-filtered-table {output.o3};
        qiime feature-table filter-samples \
                --i-table {output.o3} \
                --p-min-features {params.f4} \
                --o-filtered-table {output.o4}
        '''

rule filter_tab_qzv:
    '''Generate visual and tabular summaries of a feature table
    Generate information on how many sequences are associated with each sample
    and with each feature, histograms of those distributions, and some related
    summary statistics.
    '''
    input:
        f1 = join(output_dir,'04_filtered/1_tab_{gf_id}.qza'),
        f2 = join(output_dir,'04_filtered/2_tab_{gf_id}.qza'),
        f3 = join(output_dir,'04_filtered/3_tab_{gf_id}.qza'),
        f4 = join(output_dir,'04_filtered/4_tab_{gf_id}.qza'),
        q2_manifest = manifest_dir
    params:
        rname="filter_tab_qzv"
    output:
        o1 = join(output_dir,'04_filtered/1_tab_{gf_id}.qzv'),
        o2 = join(output_dir,'04_filtered/2_tab_{gf_id}.qzv'),
        o3 = join(output_dir,'04_filtered/3_tab_{gf_id}.qzv'),
        o4 = join(output_dir,'04_filtered/4_tab_{gf_id}.qzv'),
    shell:
        'module load qiime/2-2019.1; \
        qiime feature-table summarize \
            --i-table {input.f1} \
            --o-visualization {output.o1} \
            --m-sample-metadata-file {input.q2_manifest} && \
        qiime feature-table summarize \
            --i-table {input.f2} \
            --o-visualization {output.o2} \
            --m-sample-metadata-file {input.q2_manifest} && \
        qiime feature-table summarize \
            --i-table {input.f3} \
            --o-visualization {output.o3} \
            --m-sample-metadata-file {input.q2_manifest} && \
        qiime feature-table summarize \
            --i-table {input.f4} \
            --o-visualization {output.o4} \
            --m-sample-metadata-file {input.q2_manifest}'

rule filter_seq:
    input:
        f1 = join(output_dir,'04_filtered/1_tab_{gf_id}.qza'),
        f2 = join(output_dir,'04_filtered/2_tab_{gf_id}.qza'),
        f3 = join(output_dir,'04_filtered/3_tab_{gf_id}.qza'),
        f4 = join(output_dir,'04_filtered/4_tab_{gf_id}.qza'),
        seq_table = join(output_dir,'03_merged/merged_seq_{gf_id}.qza')
    params:
        rname="filter_seq"
    output:
        o1 = join(output_dir,'04_filtered/1_seq_{gf_id}.qza'),
        o2 = join(output_dir,'04_filtered/2_seq_{gf_id}.qza'),
        o3 = join(output_dir,'04_filtered/3_seq_{gf_id}.qza'),
        o4 = join(output_dir,'04_filtered/4_seq_{gf_id}.qza'),
    shell:
        'module load qiime/2-2019.1; \
        qiime feature-table filter-seqs --i-data {input.seq_table} --i-table {input.f1} --o-filtered-data {output.o1} && \
        qiime feature-table filter-seqs --i-data {input.seq_table} --i-table {input.f2} --o-filtered-data {output.o2} && \
        qiime feature-table filter-seqs --i-data {input.seq_table} --i-table {input.f3} --o-filtered-data {output.o3} && \
        qiime feature-table filter-seqs --i-data {input.seq_table} --i-table {input.f4} --o-filtered-data {output.o4}'

#perform taxonomic classification
def get_vsearch_cmd(wildcards):
    cmd = ""
    seq = output_dir + '04_filtered/4_seq_' + wildcards.gf_id + '.qza'

    for refs in taxonomy_ids:
        ref_tax = ref_db + 'refdb_tax_' + refs + '.qza'
        ref_seq = ref_db + 'refdb_seq_' + refs + '.qza'
        o1 = output_dir + '05_class/vsearch_' + refs + '_' + wildcards.gf_id + '.qza'
        
        cmd = 'module load qiime/2-2019.1; qiime feature-classifier classify-consensus-vsearch --i-query ' + seq + ' --i-reference-reads ' + ref_seq + ' --i-reference-taxonomy ' + ref_tax + ' --o-classification ' + o1 + '; ' + cmd
    return(cmd)

rule vsearch:
    input:
        seq = join(output_dir,'04_filtered/4_seq_{gf_id}.qza'),
    params:
        rname = 'vsearch',
        cmd = get_vsearch_cmd
    output:
        o1 = join(output_dir,'05_class/vsearch_gg_{gf_id}.qza'),
        o2 = join(output_dir,'05_class/vsearch_silva_{gf_id}.qza'),
    shell:
        '''
        {params.cmd}
        '''

def get_blast_cmd(wildcards):
    cmd = ""
    seq = output_dir + '04_filtered/4_seq_' + wildcards.gf_id + '.qza'

    for refs in taxonomy_ids:
        ref_tax = ref_db + 'refdb_tax_' + refs + '.qza'
        ref_seq = ref_db + 'refdb_seq_' + refs + '.qza'
        o1 = output_dir + '05_class/blast_' + refs + '_' + wildcards.gf_id + '.qza'
        
        cmd = 'module load qiime/2-2019.1; qiime feature-classifier classify-consensus-blast --i-query ' + seq + ' --i-reference-reads ' + ref_seq + ' --i-reference-taxonomy ' + ref_tax + ' --o-classification ' + o1 + '; ' + cmd
    return(cmd)

rule blast:
    input:
        seq = join(output_dir,'04_filtered/4_seq_{gf_id}.qza'),
    params:
        rname = 'blast',
        cmd = get_blast_cmd
    output:
        o1 = join(output_dir,'05_class/blast_gg_{gf_id}.qza'),
        o2 = join(output_dir,'05_class/blast_silva_{gf_id}.qza')
    shell:
        '''
        {params.cmd}
         '''

def get_scikit_cmd(wildcards):
    cmd = ""
    seq = output_dir + '04_filtered/4_seq_' + wildcards.gf_id + '.qza'

    for refs in taxonomy_ids:
        ref_tax = ref_db + 'refdb_classifier_' + refs + '.qza'
        o1 = output_dir + '05_class/scikit_' + refs + '_' + wildcards.gf_id + '.qza'
        
        cmd = 'module load qiime/2-2019.1; qiime feature-classifier classify-sklearn --i-classifier ' + ref_tax + ' --i-reads ' + seq + ' --o-classification ' + o1 + '; ' + cmd
    return(cmd)

rule scikit:
    input:
        seq = join(output_dir,'04_filtered/4_seq_{gf_id}.qza'),
    params:
        rname = 'scikit',
        cmd = get_scikit_cmd
    output:
        o1 = join(output_dir,'05_class/scikit_gg_{gf_id}.qza'),
        o2 = join(output_dir,'05_class/scikit_silva_{gf_id}.qza'),
    shell:
        '''
        {params.cmd}
        '''

#phylo tree
rule phylogenetic_tree:
    '''Sequence alignment, phylogentic tree assignment, rooting at midpoint
    Starts by creating a sequence alignment using MAFFT, remove any phylogenetically
    uninformative or ambiguously aligned reads, infer a phylogenetic tree
    and then root at its midpoint.
    '''
    input:
        f1 = join(output_dir,'04_filtered/4_seq_{gf_id}.qza'),
    params:
        rname="phylo"
    output:
        msa = join(output_dir,'06_phylogenetics/msa_{gf_id}.qza'),
        masked_msa = join(output_dir,'06_phylogenetics/masked_msa_{gf_id}.qza'),
        unrooted_tree = join(output_dir,'06_phylogenetics/unrooted_tree_{gf_id}.qza'),
        rooted_tree = join(output_dir,'06_phylogenetics/rooted_tree_{gf_id}.qza')
    shell:
        'module load qiime/2-2019.1; qiime phylogeny align-to-tree-mafft-fasttree \
            --i-sequences {input.f1} \
            --o-alignment {output.msa} \
            --o-masked-alignment {output.masked_msa} \
            --o-tree {output.unrooted_tree} \
            --o-rooted-tree {output.rooted_tree}'
